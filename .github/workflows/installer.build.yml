name: Build Installer

on:
  workflow_dispatch:

env:
  BUILD_CONFIG: "Release"
  BUILDNUMBER: ${{github.run_number}}

jobs:
  windows-build:
    name: Build the Ziti Desktop Edge for Windows Installer Package
    runs-on: windows-latest
    env:
      SIGNING_CERT: ${{ secrets.SIGNING_CERT_2022_b64 }}
      ADV_INST_KEY: ${{ secrets.ADV_INST_KEY }}
      JFROG_ACCESS_TOKEN: ${{ secrets.JFROG_ACCESS_TOKEN }}
      gh_ci_key: ${{ secrets.GH_CI_KEY }}
      ZITI_DEBUG: "yes_please"
      OPENZITI_P12_PASS: ${{ secrets.OPENZITI_P12_PASS }}
      OPENZITI_P12: ${{ secrets.OPENZITI_P12 }}
    defaults:
      run:
        working-directory: ./src
    steps: 
      - uses: actions/checkout@v3
      - uses: pCYSl5EDgo/cat@1.0.1
        id: vars
        with:
          path: ./version      
      - name: Setup secrets
        run: |
          echo "${env:SIGNING_CERT}" > WinSign.b64
          echo "${env:ADV_INST_KEY}" > ADV_INST_KEY.key
          echo "${env:OPENZITI_P12}" > OPENZITI_P12.b64
          C:\Windows\System32\certutil.exe -decode WinSign.b64 Installer/WinSign.p12
          C:\Windows\System32\certutil.exe -decode OPENZITI_P12.b64 Installer/openziti.p12
      - name: Trying to run choco install.
        run: Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
      - name: "Install Choco needs: advanced-installer wixtoolset ninja"
        run: choco install advanced-installer wixtoolset ninja --yes
      - name: "Install Choco needs: Node JS"
        run: choco install -y --force nodejs
      - name: Build the ziti-edge-tunnel (for now, will download later)
        run: ziti-edge-tunnel\build.bat quick
      - name: Setting up version env var
        run: echo "VERSION=$(cat .\version)" >> $env:GITHUB_ENV
      - name: Create PFX certificate
        id: create-pfx
        shell: pwsh
        env:
          PFX_CONTENT: ${{ secrets.SIGNING_CERT_2022_b64 }}
        run: |
          echo "${env:SIGNING_CERT}" > WinSign.b64
          C:\Windows\System32\certutil.exe -decode WinSign.b64 WinSign.p12
      - run: echo ${{ steps.vars.outputs.text }}
        env:
          APPVER: ${{ steps.vars.outputs.text }}
      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '16.15.0'
      - run: npm install
      - run: npm i -g electron-packager
      - run: >
          electron-packager ./ Ziti-Desktop-Edge
            --overwrite --asar --electron-version=21.4.3 
            --platform=win32 --arch=x64 --prune=true 
            --out=../release-builds --icon=./app.ico
      - name: Build AIP
        uses: caphyon/advinst-github-action@v1.0
        with:
          advinst-version: '20.6'
          advinst-license: ${{ secrets.ADV_INST_KEY }}
          advinst-enable-automation: 'true'
          aip-path: ${{ github.workspace }}\Desktop-Edge-UI.aip
          aip-build-name: DefaultBuild
          aip-package-name: Ziti-Desktop-Edge-${{ steps.vars.outputs.text }}.exe
          aip-output-dir:  ${{ github.workspace }}\release
          aip-commands: |
            SetVersion ${{ steps.vars.outputs.text }}
            SetSig
            SetDigitalCertificateFile -file ./src/WinSign.p12
      - name: Delete PFX certificate
        shell: pwsh
        env:
          PFX_PATH: ${{ steps.create-pfx.outputs.PFX_PATH }}
        run: |
          Remove-Item -Path ./WinSign.p12;
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.vars.outputs.text }}
          release_name: ${{ steps.vars.outputs.text }}
          draft: false
          prerelease: false
      - run: echo ${{ steps.create_release.outputs.upload_url }}
      - name: Publish Executable
        uses: actions/upload-release-asset@v1
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_name: Ziti-Desktop-Edge-${{ steps.vars.outputs.text }}.exe
          asset_path: ${{ github.workspace }}\release\Ziti-Desktop-Edge-${{ steps.vars.outputs.text }}.exe
          asset_content_type: application/exe
      - run: echo ./release-build/ZitiUI.zip
      - name: Publish Executable
        uses: actions/upload-release-asset@v1
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_name: ZitiUI.zip
          asset_path: ${{ github.workspace }}\release\ZitiUI.zip
          asset_content_type: application/zip
  linux-build: 
    name: Build the Ziti Desktop Edge for Linux Deb & Rpm Installer Package
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src
    steps: 
      - uses: actions/checkout@v3
      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '16.15.0'
      - uses: pCYSl5EDgo/cat@1.0.1
        id: vars
        with:
          path: ./version
      - run: echo ${{ steps.vars.outputs.text }}
        env:
          APPVER: ${{ steps.vars.outputs.text }}
      - name: Show Version
        run: echo $APPVER
      - run: npm install
      - run: npm i -g electron-builder
      - run: electron-builder --linux deb rpm
      - name: Upload Linux Deb installer
        uses: actions/upload-artifact@v2
        with:
          name: ZitiDesktopEdge-Deb-${{ steps.vars.outputs.text }}
          path: "dist/ziti-desktop-edge-${{ steps.vars.outputs.text }}.deb"
      - name: Upload Linux Rpm installer
        uses: actions/upload-artifact@v2
        with:
          name: ZitiDesktopEdge-Rpm-${{ steps.vars.outputs.text }}
          path: "dist/ziti-desktop-edge-${{ steps.vars.outputs.text }}.rpm"
